import React, { useEffect, useMemo, useState } from "react";
import * as yup from "yup";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import axios from "axios";
import { API } from "../../Host";
import { toast } from "react-toastify";
import countryList from "react-select-country-list";
import { FaCaretDown } from "react-icons/fa";
import { useLocation, useNavigate } from "react-router-dom";

const planSchema = yup.object().shape({
  fname: yup.string().required("fname is required"),
  lname: yup.string().required("lname is required"),
  address: yup.string().required("Address  is required"),
  email: yup.string().email().required("Email Id  is required"),
  country: yup
    .string()
    .test(
      "not-select",
      "Please select an Country",
      (value) => value !== "" && value !== "Select  Country"
    ),
});

const Payment = () => {
  const options = useMemo(() => countryList().getData(), []);
  const navigate = useNavigate();
  const [paymentMethod, setPaymentMethod] = useState("");
  const [conversionrate, setConversionrate] = useState("");
  const [selectedCountry, setSelectedCountry] = useState("");
  const countryCode = localStorage.getItem("countryCode");
  const location = useLocation();
  const usd = location?.state?.usd;
  const inr = location?.state?.inr;
  const receipt = location?.state?.receipt;
  const course = location?.state?.course;
  const planId = location?.state?.planId;
  const tax = location?.state?.tax;

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(planSchema),
  });

  const onSubmit = async (data) => {
    if (!paymentMethod) {
      toast.error("Please select a payment method.");
      return;
    }

    if (paymentMethod === "stripe") {
      await startStripe(data);
    } else if (paymentMethod === "razorpay") {
      await startRazorpay(data);
    }
  };

  const startStripe = async (data) => {
    const dataToSend = {
      planId: planId,
    };
    try {
      const postURL = API + "/api/stripepayment";
      const res = await axios.post(postURL, dataToSend);
      localStorage.setItem("stripe", res.data.id);
      localStorage.setItem("method", "stripe");
      localStorage.setItem("plan", receipt);
      localStorage.setItem("amount", usd);
      localStorage.setItem("cousecount", course);
      localStorage.setItem("tax", tax);
      window.location.href = res.data.url;
    } catch (error) {
      //DO NOTHING
    }
  };
  const loadRazorpayScript = () => {
    return new Promise((resolve, reject) => {
      const script = document.createElement("script");
      script.src = "https://checkout.razorpay.com/v1/checkout.js";
      script.onload = () => {
        resolve();
      };
      script.onerror = () => {
        reject(new Error("Failed to load Razorpay SDK"));
      };
      document.body.appendChild(script);
    });
  };

  const startRazorpay = async (data) => {
    await loadRazorpayScript();
    const taxRate = tax / 100;
    const taxAmount = inr * taxRate;
    const totalWithTax = Math.round(inr + taxAmount);
    const rupees = totalWithTax * 100;

    const dataToSend = {
      amount: rupees,
      currency: "INR",
      receipt: receipt,
    };

    try {
      const postURL = API + "/order";
      const res = await axios.post(postURL, dataToSend);
      const order = res.data;
      localStorage.setItem("razorpay", order.id);
      localStorage.setItem("method", "razorpay");
      localStorage.setItem("plan", receipt);
      localStorage.setItem("amount", inr);
      localStorage.setItem("coursecount", course);
      localStorage.setItem("tax", tax);
      const options = {
        key: "rzp_live_PwFLUg2b6qe1uU",
        amount: rupees,
        currency: "INR",
        name: "SeekMyCourse",
        description: "SeekMyCourse Subscription",
        image: "https://hackwittechnologies.com/assets/imgs/pmclogo.png",
        order_id: order.id, // This is the order_id generated by Razorpay
        handler: async function (response) {
          const body = {
            ...response,
            uid: localStorage.getItem("user"),
            plan: localStorage.getItem("plan"),
          };

          try {
            const validateRes = await axios.post(
              `${API}/order/validate`,
              body,
              {
                headers: {
                  "Content-Type": "application/json",
                },
              }
            );
            const jsonRes = validateRes.data;
            localStorage.setItem("type", localStorage.getItem("plan"));
            localStorage.setItem("subscription", jsonRes.paymentId);
            navigate("/success");
          } catch (validateError) {
            console.error("Validation error:", validateError);
          }
        },
        prefill: {
          name: data.fname,
          email: data.email,
          contact: "0000000000",
        },
        notes: {
          address: "Razorpay Corporate Office",
        },
        theme: {
          color: "#3399cc",
        },
      };

      var rzp1 = new window.Razorpay(options);
      rzp1.on("payment.failed", function (response) {
        toast.error("Payment failed");
      });

      rzp1.open();
    } catch (error) {
      console.error("Error starting Razorpay:", error);
      toast.error("Failed to initiate payment. Please try again.");
    }
  };

  return (
    <div className="bg-[#300080] h-screen flex justify-center items-center font-poppins text-white  ">
      <div className="w-[430px] mx-1 px-4 py-1 flex flex-col justify-center ">
        <form className="" onSubmit={handleSubmit(onSubmit)}>
          <p className="text-center text-lg my-2 font-extralight">Payment</p>
          <p className="text-center text-sm my-1">
            Enter your details and select payment gateway to continue
          </p>
          <div className="flex flex-col gap-1 mx-4 my-1 font-extralight">
            <label htmlFor="email">
              Email <span className="text-red-600">*</span>
            </label>
            <input
              type="email"
              placeholder="johndoe@gmail.com"
              {...register("email")}
              className="py-2  rounded-md text-center text-black shadow-md outline-none"
            />
            <p className="text-center text-red-300">{errors.email?.message}</p>
            <label htmlFor="fname">
              First Name<span className="text-red-600">*</span>
            </label>
            <input
              type="text"
              placeholder="e.g John"
              {...register("fname")}
              className="py-2  rounded-md px-4 text-center text-black shadow-md outline-none"
            />
            <p className="text-center text-red-300">{errors.fname?.message}</p>
            <label htmlFor="lname">
              Last Name <span className="text-red-600">*</span>
            </label>
            <input
              type="text"
              placeholder="e.g Doe"
              {...register("lname")}
              className="py-2 px-4 rounded-md  text-center text-black shadow-md outline-none"
            />
            <p className="text-center text-red-300">{errors.lname?.message}</p>
            <label htmlFor="address">
              Address <span className="text-red-600">*</span>
            </label>
            <input
              type="text"
              placeholder="Address"
              {...register("address")}
              className="py-2 px-2  rounded-md text-center  text-black shadow-md outline-none"
            />
            <p className="text-center text-red-300">
              {errors.address?.message}
            </p>
            <label htmlFor="phone">
              Country <span className="text-red-600">*</span>
            </label>
            <div className="relative inline-block  w-full">
              <select
                className="block w-full text-black px-3 py-2 pr-10 outline-none rounded-lg "
                {...register("country")}
                onChange={(e) => setSelectedCountry(e.target.value)}
              >
                <option value="">Select Country</option>
                {options.map((country) => (
                  <option key={country.value} value={country.value}>
                    {country.label}
                  </option>
                ))}
              </select>
              <div className="absolute inset-y-0 right-0 flex items-center pr-5 bg-gray-300 px-4 rounded-lg pointer-events-none outline-none">
                <FaCaretDown className="text-black text-2xl" />
              </div>
            </div>
            <p className="text-center text-red-300">
              {errors.country?.message}
            </p>

            <div className="flex justify-center my-3">
              {countryCode === "91" ? (
                <button
                  className="text-sm bg-gradient-to-r from-[#3D03FA] to-[#A71CD2] w-full py-2.5 my-2"
                  type="submit"
                  onClick={() => setPaymentMethod("razorpay")}
                >
                  Razorpay (For Indian Pay)
                </button>
              ) : (
                <button
                  className="text-sm bg-gradient-to-r from-[#3D03FA] to-[#A71CD2] w-full py-2.5 my-2"
                  type="submit"
                  onClick={() => setPaymentMethod("stripe")}
                >
                  Stripe (For International Pay)
                </button>
              )}
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default Payment;
